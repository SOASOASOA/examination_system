<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      
 "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="cn.soa.examsystem.dao.ExamRoomDao">
	<select id="findAllExaminPaper" resultType="map">
		select * from (select * from (select rownum rn,EXAM_ID,EXAM_NAME from questionbank_examination_paper) 
		where rownum<![CDATA[<=]]>#{1}) where rn<![CDATA[>=]]>#{0}
	</select>
	<select id="findTotalCount" resultType="int">
		select count(*) from questionbank_examination_paper
	</select>
	<select id="findUserFunction" resultType="map">
		select function_name,function_url from user_function  where uf_id in (select uf_id from ua_uf_relation where ua_id=#{ua_id})
	</select>
	<insert id="addExamroom"
			   parameterType="cn.soa.examsystem.entity.Examroom">
		insert into
		examroom_info(examroom_id,exam_id,examroom_create_time,examroom_create_person,examroom_begin_time,examroom_end_time,examroom_place,examroom_max_person,examroom_name,examroom_lock_status)
		values
		(#{examroom_id},#{exam_id},to_date(#{examroom_create_time},'yyyy-MM-dd HH24:mi:ss'),#{examroom_create_person},to_date(#{examroom_begin_time},'yyyy-MM-dd HH24:mi:ss'),to_date(#{examroom_end_time},'yyyy-MM-dd HH24:mi:ss'),#{examroom_place},#{examroom_max_person},#{examroom_name},#{examroom_lock_status})
	</insert>
	<select id="findExamroomByName" resultType="string">
		select examroom_name from examroom_info where examroom_name=#{examroom_name}
	</select>
	<select id="findAllExamroomInfo" resultType="map">
		 select * from (select rownum rn,a1.* from (select EXAMROOM_ID,EXAMROOM_NAME,to_char(EXAMROOM_BEGIN_TIME,'yyyy-mm-dd hh24:mi:ss') as EXAMROOM_BEGIN_TIME,to_char(EXAMROOM_END_TIME,'yyyy-mm-dd hh24:mi:ss') as EXAMROOM_END_TIME,
 		EXAMROOM_MAX_PERSON,decode(replace(EXAMROOM_LOCK_STATUS,' ',''),'on','是','off','否') as EXAMROOM_LOCK_STATUS,EXAMROOM_PLACE from examroom_info where exam_id=#{2} order by EXAMROOM_CREATE_TIME desc) a1 where rownum<![CDATA[<=]]>#{1})
		where rn<![CDATA[>=]]>#{0}
	</select>
	<select id="findExamroomTotalCount" resultType="int">
		select count(*) from examroom_info where exam_id=#{exam_id}
	</select>
	<delete id="deleteExamroomById" parameterType="string">
		 delete examroom_info where examroom_id=#{examroom_id}
	</delete>
	<update id="updateExamroomInfoById" parameterType="cn.soa.examsystem.entity.Examroom">
		update
		examroom_info
		set
		examroom_begin_time=to_date(#{examroom_begin_time},'yyyy-MM-dd HH24:mi:ss'),examroom_end_time=to_date(#{examroom_end_time},'yyyy-MM-dd HH24:mi:ss'),examroom_lock_status=#{examroom_lock_status},examroom_max_person=#{examroom_max_person},examroom_name=#{examroom_name},examroom_place=#{examroom_place}
		where
		examroom_id=#{examroom_id}
	</update>
	<select id="findExamroomByExamId" parameterType="string" resultType="map">
		select examroom_id,examroom_name from examroom_info where exam_id=#{exam_id}
	</select>
</mapper>












